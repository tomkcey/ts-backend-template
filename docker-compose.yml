services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: server
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      jaeger:
        condition: service_started
      prometheus:
        condition: service_started
      postgresql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  # https://hub.docker.com/_/postgres
  postgresql:
    image: postgres:16.4-alpine3.20
    environment:
      POSTGRES_USER: localuser
      POSTGRES_PASSWORD: localpass
      PGPASSWORD: localpass
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "localuser"]
      interval: 3s
      timeout: 3s
      retries: 3

  # https://hub.docker.com/_/rabbitmq
  rabbitmq:
    image: rabbitmq:3.13.7-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: localuser
      RABBITMQ_DEFAULT_PASS: localpass
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 3s
      timeout: 3s
      retries: 3

  # https://hub.docker.com/r/valkey/valkey
  valkey:
    image: valkey/valkey:8.0-alpine
    ports:
      - 6379:6379

  # https://hub.docker.com/r/minio/minio
  minio:
    image: quay.io/minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: localuser
      MINIO_ROOT_PASSWORD: localpass
    ports:
      - 9000:9000
      - 9001:9001

  # https://hub.docker.com/r/jaegertracing/all-in-one
  jaeger:
    image: jaegertracing/all-in-one
    restart: always
    ports:
      - "16686:16686" # UI
      - "14250:14250" # gRPC collector port
      - "14268:14268" # HTTP collector port
      - "14269:14269" # Healthcheck port
      - "4441:4318" # HTTP OTLP Collector port

  # https://hub.docker.com/r/prom/prometheus
  prometheus:
    image: prom/prometheus
    restart: always
    ports:
      - "9090:9090" # UI
    volumes:
      - ./volumes/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--log.level=debug"

  # https://hub.docker.com/r/grafana/grafana
  grafana:
    image: grafana/grafana
    restart: always
    environment:
      - GF_PROVISIONING_PATH=/etc/grafana/provisioning
    ports:
      - "3000:3000" # UI
    volumes:
      - ./volumes/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./volumes/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - collector

  # https://hub.docker.com/r/otel/opentelemetry-collector
  collector:
    image: otel/opentelemetry-collector-contrib:latest
    restart: always
    volumes:
      - ./volumes/otel-collector/otel-collector-config.yaml:/etc/otel-collector/otel-collector-config.yaml
    command:
      - --config=/etc/otel-collector/otel-collector-config.yaml
    ports:
      - "9464:9464" # Prometheus exporter port
      - "13133:13133" # Healthcheck port
      - "4442:4318" # HTTP OTLP Collector port
    depends_on:
      - prometheus
